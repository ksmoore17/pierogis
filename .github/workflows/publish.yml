# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: upload pyrogis

on:
  push:
    tags:
      - v*
    branches:
      - test
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.rust-target }}
          profile: minimal
          default: true
          components: rustfmt, clippy

      - name: fmt rust
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          toolchain: stable
          command: fmt
          args: --manifest-path ./Cargo.toml -- --check

      - name: clippy rust
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: clippy
          args: --manifest-path ./Cargo.toml --all-targets --all-features -- -D warnings

      - name: create pyrogis environment
        run: |
          python -m venv .env
          source .env/bin/activate
          sudo apt-get install -y gifsicle
          pip install wheel
          pip install -r requirements.txt
          pip install .

      - name: flake8 python
        continue-on-error: true
        run: |
          source .env/bin/activate
          pip install flake8
          flake8 src/pyrogis

      - name: pylint python
        continue-on-error: true
        run: |
          source .env/bin/activate
          pip install pylint
          pylint src/pyrogis

      - name: run mypy
        continue-on-error: true
        run: |
          source .env/bin/activate
          pip install mypy
          mypy src/pyrogis

      - name: run tests
        run: |
          source .env/bin/activate
          pip install pytest
          pytest -s -v tests

  manylinux-build:
    if: "!startsWith(github.ref, 'refs/heads/develop')"
    runs-on: ubuntu-latest
    needs: [ test ]
    container: quay.io/pypa/manylinux2014_x86_64

    steps:
      - uses: actions/checkout@v1
      - name: build wheels
        run: 'sh build_wheels_manylinux.sh'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          DIST_DIR: ${{ github.sha }}

  macos-arm-build:
    if: "!startsWith(github.ref, 'refs/heads/develop')"
    runs-on: [ "self-hosted", "macos" ]
    needs: [ test ]
    steps:
      - uses: actions/checkout@v1
      - name: build wheels
        run: 'arch -arm64 sh build_wheels_mac_arm.sh'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          DIST_DIR: ${{ github.sha }}

  macos-windows-build:
    if: "!startsWith(github.ref, 'refs/heads/develop')"
    runs-on: ${{ matrix.platform.os }}
    needs: [ test ]
    strategy:
      fail-fast: true
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
        platform: [
          { os: "macOS-10.15",   python-architecture: "x64", rust-target: "x86_64-apple-darwin" },
          { os: "macOS-11.0",   python-architecture: "x64", rust-target: "x86_64-apple-darwin" },
          { os: "windows-latest", python-architecture: "x64", rust-target: "x86_64-pc-windows-msvc" },
          { os: "windows-latest", python-architecture: "x86", rust-target: "i686-pc-windows-msvc" },
        ]

    steps:
      - uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.python-architecture }}

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.rust-target }}
          profile: minimal
          default: true

      - name: build wheel
        run: |
          pip install -U setuptools wheel setuptools-rust
          python setup.py bdist_wheel

      - name: upload to aws
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          DIST_DIR: ${{ github.sha }}
        run: |
          pip install -U awscli
          python -m awscli s3 sync --exact-timestamps ./dist "s3://pierogis/dist/$DIST_DIR"

  publish:
    if: "!startsWith(github.ref, 'refs/heads/develop')"
    runs-on: ubuntu-latest
    needs: [ manylinux-build, macos-windows-build ]
    steps:
      - uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2

      - name: retrieve all wheels
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          DIST_DIR: ${{ github.sha }}
        run: |
          pip install awscli
          aws s3 sync "s3://pierogis/dist/$DIST_DIR" ./dist
      - name: Install dependencies
        run: |
          pip install setuptools wheel setuptools-rust
      - name: create source distribution
        run: |
          python setup.py sdist

      - name: publish to test pypi
        if: startsWith(github.ref, 'refs/heads')
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
        run: |
          pip install twine
          twine upload --repository testpypi dist/* -u __token__ -p "$PYPI_TOKEN"

      - name: publish to pypi
        if: startsWith(github.ref, 'refs/tags')
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install twine
          twine upload dist/* -u __token__ -p "$PYPI_TOKEN"
